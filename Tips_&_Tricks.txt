********************************* Tips & Tricks *********************************

01: .table() => .table([variabl_1, variable_2,...]) -> Used to console multiple varables.

02: .toString() -> Used to convert number to string.

03: Number(string_variable_name) -> typeof = "number" BUT when we console that changed value from string to number, it give "NaN" . --->>>> ?????????

04: Primitive
      => 7 types : String, Number, Boolearn, null, undefined, Symbol, BigInt
      => For the above data types, their typeof is same as data type EXECEPT "null" -> 'object'.

05: Non primitive
      => 3 types : Array, Objects, Functions
      => For all non-primitive data types, Their return type is "object" only Except "function" -> function( Also called as function object)

06: About Scope of Object using "this" keyword :-
    => "this" keywoard refer current context means able to access the value of a keys/values that present inside thier scope like inside object/array.
    => In browser, the global object is "window object". -> When we try to access : console.log(this);
    => In node like VS Code, the globle object is empty i.e {} -> when we try to access : console.log(this);
      

07: How Arrow Function Evolve :-

   #01:  () => {}                                              : This is basic syntax.

   #02:  const arrowFunction = () => {}                        : Here we are storing arrow function into a variable.

   #03:  const arrowFunction = (num1, num2) => {               : Here we passing parameters and returning some thing.
                      return num1 + num2
         }   

   #04:  const arrowFunction = (num1, num2) => num1 + num2     : This type is called as Implicit Return. In this we do not required to write "{}" and "return" because they assume that this is "one line code" only.     

   #05:  const arrowFunction = (num1, num2) => (num1 + num2)   : When we use round bracket i.e () then not required to write "return" keyword but required in curly braces i.e "{}".

   #06:  const arrowFunction = (num1, num2) => ({username : "Nitish Kumar"}) : To return object we reuired  -> ().

08: HOISTING :-
	-> Hoisting is the default behavior of moving all the declarations at the top of the scope before code execution. 
	-> Basically, it gives us an advantage that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.

eg :- 
------------------------------------------------------------------------------
console.log(addTwo(5))            //  This will give ERROR due to Hoisting because addTwo()/addTwo variable is not defined before function call

const addTwo = function(num){     //  function declaration  
    return num + 2
}

console.log(addTwo(5))           //  function call/execute function. This will Executed sucessfully.


-----------------------------------------------------------------------------
09:  IIFE :-
   
    =>  Define IIFE -> IIFE stands for Immediately Invoked Function Expressions which is used to prevent the pollution from global scope variables.
    => ()();   -> Here, inside 1st (), we use it for decleration and 2nd () is used for execuation.

09: Truthy/Falsy Value :-
    
            **********************  falsy values  ******************

               false, 0, -0, BigInt 0n, "", null, undefined, NaN

            **********************  truthy values  *****************

                   "0", 'false', " ", [], {}, function(){}

10: Operators :-
         
            => Nullish Coalescing Operator (??): Work only on "null" and "undefined".
            => Terniary Operator
                    condition ? true : false
            
11: To compare Empty Array :-
            -> arr_Name.length === 0  -> Check this inside if() block or check in any condition block.

12: To compare Empty Object :-
            -> Object.keys(object_Name).length === 0   ->  Check this inside if() block or check in any condition block.











